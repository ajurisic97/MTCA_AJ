// <auto-generated />
using System;
using MTCA.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTCA.Infrastructure.Migrations.AppDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MTCA.Domain.Models.City", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CountryId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreatedOn")
                    .HasColumnType("datetime2");

                b.Property<Guid?>("DeletedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("DeletedOn")
                    .HasColumnType("datetime2");

                b.Property<Guid>("LastModifiedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("LastModifiedOn")
                    .HasColumnType("datetime2");

                b.Property<decimal?>("Latitude")
                    .HasColumnType("decimal(18,7)");

                b.Property<decimal?>("Longitude")
                    .HasColumnType("decimal(18,7)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid?>("RegionId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("TenantId")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("CountryId");

                b.HasIndex("RegionId");

                b.ToTable("Cities", "Catalog");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Country", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreatedOn")
                    .HasColumnType("datetime2");

                b.Property<Guid?>("DeletedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("DeletedOn")
                    .HasColumnType("datetime2");

                b.Property<Guid>("LastModifiedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("LastModifiedOn")
                    .HasColumnType("datetime2");

                b.Property<decimal?>("Latitude")
                    .HasColumnType("decimal(18,7)");

                b.Property<decimal?>("Longitude")
                    .HasColumnType("decimal(18,7)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid?>("RegionId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("TenantId")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("RegionId");

                b.ToTable("Countries", "Catalog");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Permission", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Permissions", "Identity");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Person", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreatedOn")
                    .HasColumnType("datetime2");

                b.Property<Guid?>("DeletedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("DeletedOn")
                    .HasColumnType("datetime2");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<Guid>("LastModifiedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("LastModifiedOn")
                    .HasColumnType("datetime2");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("TenantId")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("People", "Catalog");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Region", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreatedOn")
                    .HasColumnType("datetime2");

                b.Property<string>("CustomRegionName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid?>("DeletedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("DeletedOn")
                    .HasColumnType("datetime2");

                b.Property<Guid>("LastModifiedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("LastModifiedOn")
                    .HasColumnType("datetime2");

                b.Property<decimal?>("Latitude")
                    .HasColumnType("decimal(18,7)");

                b.Property<decimal?>("Longitude")
                    .HasColumnType("decimal(18,7)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid?>("ParentId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("RegionType")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("TenantId")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("ParentId");

                b.ToTable("Regions", "Catalog");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Role", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Roles", "Identity");
            });

            modelBuilder.Entity("MTCA.Domain.Models.RolePermission", b =>
            {
                b.Property<Guid>("RoleId")
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("PermissionId")
                    .HasColumnType("int");

                b.HasKey("RoleId", "PermissionId");

                b.HasIndex("PermissionId");

                b.ToTable("RolePermissions", "Identity");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Street", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CityId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreatedOn")
                    .HasColumnType("datetime2");

                b.Property<Guid?>("DeletedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("DeletedOn")
                    .HasColumnType("datetime2");

                b.Property<Guid>("LastModifiedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("LastModifiedOn")
                    .HasColumnType("datetime2");

                b.Property<decimal?>("Latitude")
                    .HasColumnType("decimal(18,7)");

                b.Property<decimal?>("Longitude")
                    .HasColumnType("decimal(18,7)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid?>("RegionId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("TenantId")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("CityId");

                b.HasIndex("RegionId");

                b.ToTable("Streets", "Catalog");
            });

            modelBuilder.Entity("MTCA.Domain.Models.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreatedOn")
                    .HasColumnType("datetime2");

                b.Property<Guid?>("DeletedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("DeletedOn")
                    .HasColumnType("datetime2");

                b.Property<Guid>("LastModifiedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("LastModifiedOn")
                    .HasColumnType("datetime2");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<Guid?>("PersonId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("RefreshToken")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime?>("RefreshTokenExpiryTime")
                    .HasColumnType("datetime2");

                b.Property<string>("TenantId")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("Id");

                b.HasIndex("PersonId");

                b.ToTable("Users", "Identity");
            });

            modelBuilder.Entity("MTCA.Domain.Models.UserRole", b =>
            {
                b.Property<Guid>("RoleId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("RoleId", "UserId");

                b.HasIndex("UserId");

                b.ToTable("UserRoles", "Identity");
            });

            modelBuilder.Entity("MTCA.Domain.Models.City", b =>
            {
                b.HasOne("MTCA.Domain.Models.Country", "Country")
                    .WithMany("Cities")
                    .HasForeignKey("CountryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("MTCA.Domain.Models.Region", "Region")
                    .WithMany("Cities")
                    .HasForeignKey("RegionId");

                b.Navigation("Country");

                b.Navigation("Region");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Country", b =>
            {
                b.HasOne("MTCA.Domain.Models.Region", "Region")
                    .WithMany("Countries")
                    .HasForeignKey("RegionId");

                b.Navigation("Region");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Region", b =>
            {
                b.HasOne("MTCA.Domain.Models.Region", "Parent")
                    .WithMany("Children")
                    .HasForeignKey("ParentId");

                b.Navigation("Parent");
            });

            modelBuilder.Entity("MTCA.Domain.Models.RolePermission", b =>
            {
                b.HasOne("MTCA.Domain.Models.Permission", null)
                    .WithMany("RolePermissions")
                    .HasForeignKey("PermissionId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("MTCA.Domain.Models.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("MTCA.Domain.Models.Street", b =>
            {
                b.HasOne("MTCA.Domain.Models.City", "City")
                    .WithMany("Streets")
                    .HasForeignKey("CityId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("MTCA.Domain.Models.Region", "Region")
                    .WithMany("Streets")
                    .HasForeignKey("RegionId");

                b.Navigation("City");

                b.Navigation("Region");
            });

            modelBuilder.Entity("MTCA.Domain.Models.User", b =>
            {
                b.HasOne("MTCA.Domain.Models.Person", "Person")
                    .WithMany("Users")
                    .HasForeignKey("PersonId");

                b.Navigation("Person");
            });

            modelBuilder.Entity("MTCA.Domain.Models.UserRole", b =>
            {
                b.HasOne("MTCA.Domain.Models.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("MTCA.Domain.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("MTCA.Domain.Models.City", b =>
            {
                b.Navigation("Streets");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Country", b =>
            {
                b.Navigation("Cities");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Permission", b =>
            {
                b.Navigation("RolePermissions");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Person", b =>
            {
                b.Navigation("Users");
            });

            modelBuilder.Entity("MTCA.Domain.Models.Region", b =>
            {
                b.Navigation("Children");

                b.Navigation("Cities");

                b.Navigation("Countries");

                b.Navigation("Streets");
            });
#pragma warning restore 612, 618
        }
    }
}
